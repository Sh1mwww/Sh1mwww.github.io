{"title":"ElasticSearch数据库简单介绍","uid":"90bb244b78e2bf4cc75c96413958b4eb","slug":"elk","date":"2023-03-05T07:57:17.000Z","updated":"2023-03-11T09:54:50.919Z","comments":true,"path":"api/articles/elk.json","keywords":null,"cover":[],"content":"<h2 id=\"elasticsearch简介\"><a href=\"#elasticsearch简介\" class=\"headerlink\" title=\"elasticsearch简介\"></a>elasticsearch简介</h2><p>ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索引擎。</p>\n<h2 id=\"elasticSearch的使用场景\"><a href=\"#elasticSearch的使用场景\" class=\"headerlink\" title=\"elasticSearch的使用场景\"></a>elasticSearch的使用场景</h2><p>1、为用户提供按关键字查询的全文搜索功能。<br>2、实现企业海量数据的处理分析的解决方案。大数据领域的重要一份子，如著名的ELK框架(ElasticSearch,Logstash,Kibana)。</p>\n<h2 id=\"与其他数据存储进行比较\"><a href=\"#与其他数据存储进行比较\" class=\"headerlink\" title=\"与其他数据存储进行比较\"></a>与其他数据存储进行比较</h2><img src=\"../%E4%B8%8E%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E8%BF%9B%E8%A1%8C%E6%AF%94%E8%BE%83.png\" alt=\"比较\">\n\n<h2 id=\"elasticsearch的特点\"><a href=\"#elasticsearch的特点\" class=\"headerlink\" title=\"elasticsearch的特点\"></a>elasticsearch的特点</h2><p>1，天然分片，天然集群<br>es 把数据分成多个shard，下图中的P0-P2，多个shard可以组成一份完整的数据，这些shard可以分布在集群中的各个机器节点中。随着数据的不断增加，集群可以增加多个分片，把多个分片放到多个机子上，已达到负载均衡，横向扩展。在实际运算过程中，每个查询任务提交到某一个节点，该节点必须负责将数据进行整理汇聚，再返回给客户端，也就是一个简单的节点上进行Map计算，在一个固定的节点上进行Reduces得到最终结果向客户端返回。</p>\n<p>2，天然索引<br>ES 所有数据都是默认进行索引的，这点和mysql正好相反，mysql是默认不加索引，要加索引必须特别说明，ES只有不加索引才需要说明。而ES使用的是倒排索引和Mysql的B+Tree索引不同。</p>\n<p>传统关系性数据库</p>\n<p>弊端：<br>1、 对于传统的关系性数据库对于关键词的查询，只能逐字逐行的匹配，性能非常差。<br>2、匹配方式不合理，比如搜索“小密手机” ，如果用like进行匹配， 根本匹配不到。但是考虑使用者的用户体验的话，除了完全匹配的记录，还应该显示一部分近似匹配的记录，至少应该匹配到“手机”。<br>倒排索引是怎么处理的<br>全文搜索引擎目前主流的索引技术就是倒排索引的方式。<br>传统的保存数据的方式都是<br>记录→单词<br>而倒排索引的保存数据的方式是<br>单词→记录</p>\n<p>索引结构对比<br><img src=\"../B%2BTree.png\" alt=\"B+Tree\"><br><img src=\"../lucene%20%E5%80%92%E6%8E%92%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84.png\" alt=\"lucene 倒排索引结构\"><br>可以看到 lucene 为倒排索引(Term Dictionary)部分又增加一层Term Index结构，用于快速定位，而这Term Index是缓存在内存中的，但mysql的B+tree不在内存中，所以整体来看ES速度更快，但同时也更消耗资源（内存、磁盘）。</p>\n<h2 id=\"lucene与elasticsearch的关系\"><a href=\"#lucene与elasticsearch的关系\" class=\"headerlink\" title=\"lucene与elasticsearch的关系\"></a>lucene与elasticsearch的关系</h2><p>咱们之前讲的处理分词，构建倒排索引，等等，都是这个叫lucene的做的。那么能不能说这个lucene就是搜索引擎呢？</p>\n<p>还不能。lucene只是一个提供全文搜索功能类库的核心工具包，而真正使用它还需要一个完善的服务框架搭建起来的应用。</p>\n<p>好比lucene是类似于发动机，而搜索引擎软件（ES,Solr）就是汽车。</p>\n<p>目前市面上流行的搜索引擎软件，主流的就两款，elasticsearch和solr,这两款都是基于lucene的搭建的，可以独立部署启动的搜索引擎服务软件。由于内核相同，所以两者除了服务器安装、部署、管理、集群以外，对于数据的操作，修改、添加、保存、查询等等都十分类似。就好像都是支持sql语言的两种数据库软件。只要学会其中一个另一个很容易上手。</p>\n<p>从实际企业使用情况来看，elasticSearch的市场份额逐步在取代solr，国内百度、京东、新浪都是基于elasticSearch实现的搜索功能。国外就更多了 像维基百科、GitHub、Stack Overflow等等也都是基于ES的。</p>\n","feature":true,"text":"elasticsearch简介ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#elasticsearch%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">elasticsearch简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#elasticSearch%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">elasticSearch的使用场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%8E%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E8%BF%9B%E8%A1%8C%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">与其他数据存储进行比较</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#elasticsearch%E7%9A%84%E7%89%B9%E7%82%B9\"><span class=\"toc-text\">elasticsearch的特点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#lucene%E4%B8%8Eelasticsearch%E7%9A%84%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">lucene与elasticsearch的关系</span></a></li></ol>","author":{"name":"Sh1mwww","slug":"blog-author","avatar":"https://img.onl/qZjVAP","link":"/","description":"及时行乐","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Git Flow 工作原理","uid":"4783a03c76b99864e7fb550cfa766073","slug":"工作原理","date":"2023-03-11T08:13:35.000Z","updated":"2023-03-11T10:03:57.536Z","comments":true,"path":"api/articles/工作原理.json","keywords":null,"cover":[],"text":"一、 Git Flow 工作模型的原理无规矩不成方圆，但是规矩太多了，则感觉到束缚。我们一个人工作的时候喜欢无拘无束，想怎么干就怎么干，没有人评判，没有人检验。时间久了就会盲目自大，以为增删改查熟悉业务就能够搞定一些。但是当项目逐渐扩大，原来的灵活逐渐变成了混乱，原来的快速迭代因...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"Sh1mwww","slug":"blog-author","avatar":"https://img.onl/qZjVAP","link":"/","description":"及时行乐","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"mylover","uid":"d4105a7b8a6b6b0d8864aefbdb368e9a","slug":"mylover","date":"2022-04-15T07:42:17.000Z","updated":"2023-03-11T07:36:24.522Z","comments":true,"path":"api/articles/mylover.json","keywords":null,"cover":null,"text":"tags: mylover兴趣广泛，喜欢篮球足球hiphop ","link":"","photos":[],"count_time":{"symbolsCount":34,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Sh1mwww","slug":"blog-author","avatar":"https://img.onl/qZjVAP","link":"/","description":"及时行乐","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}