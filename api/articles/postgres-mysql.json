{"title":"PostgreSQL和MySQL性能比较","uid":"4d40d05723fa24dd61a0704313888ecd","slug":"postgres-mysql","date":"2023-03-28T06:55:41.000Z","updated":"2023-03-28T07:15:51.483Z","comments":true,"path":"api/articles/postgres-mysql.json","keywords":null,"cover":"https://cdn.pixabay.com/photo/2017/05/09/03/46/alberta-2297204_960_720.jpg","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>​<br>在 Arctype 社区里，我们回答了很多关于数据库性能的问题，尤其是 PostgreSQL 和 MySQL 这两个之间的性能问题。在管理数据库中，性能是一项至关重要而又复杂的任务。它可能受到配置、硬件、或者是操作系统的影响。PostgreSQL 和 MySQL 是否具有稳定性和兼容性取决于我们的硬件基础架构。</p>\n<p>并不是所有关系型数据库（RDBMS）都是一样的。 虽然 PostgreSQL 和 MySQL 有一些地方很相似，但是在不同的使用场景中，它们都有各自的性能优势。虽然在上篇文章中我们已经讨论了一些它们之间的基本差异，但在性能上还有许多差异值得我们讨论。</p>\n<p>在本文中，我们将讨论工作负载分析和运行的查询。然后，我们将进一步解释一些可以提高 MySQL 和 PostgreSQL 数据库的性能的基本配置。最后总结一下 MySQL 和 PostgreSQL 的一些关键区别。</p>\n<p>​</p>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>如何衡量性能</li>\n<li>查询JSON的性能</li>\n<li>索引开销</li>\n<li>数据库复制和集群</li>\n<li>并发</li>\n<li>总结</li>\n</ul>\n<p>​</p>\n<h1 id=\"如何衡量性能\"><a href=\"#如何衡量性能\" class=\"headerlink\" title=\"如何衡量性能\"></a>如何衡量性能</h1><p>MySQL 尽管在读写操作混合使用时并发性很差，但是因其优秀的读取速度而备受好评。PostgreSQL（俗称 Postgres）表示自己是最先进的开源关系数据库，并且已开发为符合标准且功能丰富的数据库。</p>\n<p>以前，Postgres 的性能更加平衡，也就是说，读取通常比MySQL慢，但后来它得到了改进，现在可以更有效地写入大量数据，从而使并发处理更好。MySQL 和 Postgres 的最新版本略微消除了两个数据库之间的性能差异。</p>\n<p>在 MySQL 中使用旧的MyIsam引擎可以非常快速地读取数据。遗憾的是最新版本的 MySQL 并没有使用该引擎。但是，如果使用 InnoDB（允许键约束，事务），则差异可以忽略不计。InnoDB 中的功能对于企业或有很大用户量的应用程序至关重要，因此不能选择使用旧引擎。但是随着 MySQL 版本不断更新，这种差异越来越小。</p>\n<p><strong>数据库基准测试</strong>是一个用于表现和比较数据库系统或这些系统上的算法的性能（时间，内存或质量）的可再现的实验框架。 这种实用的框架定义了被测系统、工作量、指标和实验。</p>\n<p>在接下来 4 节内容中，我们讨论一下每个数据库各自的性能优点。</p>\n<p>​</p>\n<h1 id=\"JSON-查询在-Postgres-中更快\"><a href=\"#JSON-查询在-Postgres-中更快\" class=\"headerlink\" title=\"JSON 查询在 Postgres 中更快\"></a>JSON 查询在 Postgres 中更快</h1><p>在本节中，我们看下 PostgreSQL 和 MySQL 之间的基准测试的差异</p>\n<h3 id=\"执行步骤\"><a href=\"#执行步骤\" class=\"headerlink\" title=\"执行步骤\"></a>执行步骤</h3><ol>\n<li>创建一个项目（Java、 Node、或者Ruby），并且该项目的数据库使用的是 PostgreSQL 和 MySQL。</li>\n<li>创建一个 JSON 对象，然后执行读取和写入操作。</li>\n<li>整个 JSON 对象的大小为约为 14 MB，在数据库中创建约 200 至 210 个条目。</li>\n</ol>\n<h4 id=\"统计数据\"><a href=\"#统计数据\" class=\"headerlink\" title=\"统计数据\"></a>统计数据</h4><p><strong>PostgreSQL：</strong> 平均时间（毫秒）：写入：2279.25、读取：31.65、更新：26.26</p>\n<p><img src=\"https://img.onl/mupY0y\"></p>\n<p><strong>MySQL：</strong> 平均时间（毫秒）：写入：3501.05、读取：49.99、更新：62.45</p>\n<p><img src=\"https://img.onl/kTY0nr\"></p>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p>从上面的数据可以看出，PostgreSQL 在处理 JSON 时的性能要比 MySQL 更好，当然这也是 PostgreSQL 亮点之一。</p>\n<p>我们可以对数据库进行频繁的操作（读取、写入、更新）来了解其性能，然后选出最好的来用到你的项目上。通过上面的测试数据结果我们可以知道，尽管 MySQL 的速度比 PostgreSQL 要快，但也只是在某些特定条件下。</p>\n<p>​</p>\n<h1 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h1><p>索引是所有数据库最重要的特性之一。数据库在查询数据时，有索引查询比没有索引查询快的多。但是，索引也会给数据库带来额外的开销，所有我们好刚要用在刀刃上，别瞎用。在没有索引的情况下，数据库在查找数据时会进行全文搜索（Full Text），也就是会从第一行开始一行一行的进行对比查找，这样的话数据量越多，查询的越慢。</p>\n<p>PostgreSQL 和 MySQL 都有一些处理索引的特定的方法：</p>\n<ul>\n<li><strong>B-Tree索引：</strong> PostgreSQL 支持 B-Tree 索引和 Hash 索引。同时 PostgreSQL 还支持以下特性：</li>\n<li><strong>表达式索引：</strong> 我们可以为表达式或函数来创建一个索引，而不是用字段。</li>\n<li><strong>局部索引：</strong> 索引只是表的一部分</li>\n</ul>\n<p>假设 PostgreSQL 有一个 <code>user</code> 表，表的每一行代表一个用户。那么表可以这么定义：</p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">CREATE TABLE users (\n    id    SERIAL PRIMARY KEY,  \n    email VARCHAR DEFAULT NULL,  \n    name  VARCHAR\n);</code></pre>\n\n<p>假设我们为该表创建如下索引：</p>\n<p><img src=\"https://img.onl/AmPSOX\"></p>\n<p>上面两个索引有什么区别呢？ 索引 <code>#1</code> 是一个局部索引，索引 <code>#2</code> 是一个表达式索引。 正如 PostgreSQL 文档所描述的那样，</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p> “局部索引建立在由条件表达式定义的表中的行子集上（称为局部索引的谓词）。索引仅包含满足谓词的那些表行的条目。使用局部索引的主要原因是避免索引常见的值。由于查询通常会出现的值（占所有表行的百分之几以上的值）无论如何都会遍历大多数表，因此使用索引的好处是微不足道的。更好的策略是创建局部索引，其中这些行完全排除在外。局部索引减少了索引的大小，因此加快了使用索引的查询的速度。 这也将使许多写入操作速度更快，因为索引不需要在所有情况下都更新。” —— 摘自PostGres文档</p></blockquote>\n<p><strong>MySQL：</strong> :MySQL 大部分索引（PRIMARY KEY、UNIQUE、INDEX、FULLTEXT）在使用时都是使用 B-Tree 数据结构。特殊情况下也会使用 R-Tree 的数据结构。 MySQL 也支持 Hash 索引，而且在 InnoDB 引擎下使用 FULLTEXT 索引时是倒序排列的。</p>\n<p>​</p>\n<h1 id=\"数据库复制\"><a href=\"#数据库复制\" class=\"headerlink\" title=\"数据库复制\"></a>数据库复制</h1><p>PostgreSQL 和 MySQL 的另一个性能差异是<strong>复制</strong>。复制指的是将数据从一个数据库复制到另外一台服务器上的数据库。这种数据的分布意味着用户现在可以访问数据而不直接影响其他用户。数据库复制最大的困难之一是协调整个分布式系统中的数据一致性。MySQL 和 PostgreSQL 为数据库复制提供了几个选项。除了一个主服务器，一个备用数据库和多个备用数据库之外，PostgreSQL 和MySQL 还提供以下复制选项：</p>\n<p>​</p>\n<h1 id=\"多版本并发控制（MVCC）\"><a href=\"#多版本并发控制（MVCC）\" class=\"headerlink\" title=\"多版本并发控制（MVCC）\"></a>多版本并发控制（MVCC）</h1><p>当用户同时对一个数据库进行读和写操作时，这种现象就叫并发现象。因此，多个客户端同时读取和写入会导致各种边缘情况&#x2F;竞赛条件，即，对于相同的记录X和许多其他条件，先读取后写入。各种现代数据库都利用<strong>事务</strong>来减轻并发问题。</p>\n<p>Postgres 是第一个推出多版本并发控制（MVCC）的 DBMS，这意味着读取永远不会阻止写入，反之亦然。此功能是企业偏爱 Postgres 而不是 MySQL 的主要原因之一</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p> “不同于大多数数据库使用锁来进行并发控制, Postgres通过使用多版本模型维护数据一致性。此外，在查询数据库时，无论基础数据的当前状态如何，每个事务都会像以前一样看到数据快照（数据库版本）。它可以防止事务查看同一数据行上的（其他）并发事务更新引起的不一致数据，从而为每个数据库会话提供事务隔离。” —— 摘自PostGres文档</p></blockquote>\n<p>MVCC 允许多个读取器和写入器同时与 Postgres 数据库进行交互，从而避免了每次有人与数据进行交互时都需要读写锁的情况。附带的好处是此过程可显着提高效率。<strong>MySQL</strong> 利用 InnoDB 存储引擎，支持对同一行的写入和读取而不会互相干扰。MySQL每次将数据写入一行时，也会将一个条目写入回滚段中。此数据结构存储用于将行恢复到其先前状态的<strong>回滚日志</strong>。之所以称为<strong>回滚段</strong>，因为它是用来处理回滚事务的工具。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p> “InnoDB 是一个多版本存储引擎：它保留有关已更改行的旧版本的信息，以支持诸如并发和回滚之类的事务功能。此信息存储在表空间中的数据结构中，该数据结构称为回滚段（Oracle 中也有类似的结构）。InnoDB 使用回滚段中的信息来执行事务回滚中所需的撤消操作。它还使用该信息来构建行的早期版本以实现一致的读取。” —— 摘自MySQL文档</p></blockquote>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>在本文中，我们处理了PostgreSQL和MySQL之间的一些性能差异。虽然数据库性能会受硬件、操作系统类型等等的影响，但是最主要的是你对目标数据库的了解。PostgreSQL 和 MySQL 都有各自的有点和缺点，但是了解哪些功能适合某个项目并整合这些功能最终可以提高性能。</p>\n<p>​</p>\n","feature":true,"text":"简介​在 Arctype 社区里，我们回答了很多关于数据库性能的问题，尤其是 PostgreSQL 和 MySQL 这两个之间的性能问题。在管理数据库中，性能是一项至关重要而又复杂的任务。它可能受到配置、硬件、或者是操作系统的影响。PostgreSQL 和 MySQL 是否具有稳...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"mysql","slug":"mysql","count":1,"path":"api/tags/mysql.json"},{"name":"postgreSQL","slug":"postgreSQL","count":2,"path":"api/tags/postgreSQL.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">简介</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">目录</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E8%A1%A1%E9%87%8F%E6%80%A7%E8%83%BD\"><span class=\"toc-text\">如何衡量性能</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JSON-%E6%9F%A5%E8%AF%A2%E5%9C%A8-Postgres-%E4%B8%AD%E6%9B%B4%E5%BF%AB\"><span class=\"toc-text\">JSON 查询在 Postgres 中更快</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%A7%E8%A1%8C%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">执行步骤</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%9F%E8%AE%A1%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">统计数据</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AE%BA\"><span class=\"toc-text\">结论</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">索引</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E5%88%B6\"><span class=\"toc-text\">数据库复制</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%88MVCC%EF%BC%89\"><span class=\"toc-text\">多版本并发控制（MVCC）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"Sh1mwww","slug":"blog-author","avatar":"https://img.onl/qZjVAP","link":"/","description":"及时行乐","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"postgre-jsonb","uid":"0fc584a98326829aa7c7c21cccb54ed2","slug":"postgre-jsonb","date":"2023-03-28T07:07:16.000Z","updated":"2023-03-28T07:22:18.816Z","comments":true,"path":"api/articles/postgre-jsonb.json","keywords":null,"cover":"https://cdn.pixabay.com/photo/2013/10/09/02/27/lake-192990_960_720.jpg","text":"引言​ 通过本文可掌握在pg数据库中如何正确使用json字段，如何进行数据查询，在where子查询中如何使用，以及对json值进行聚合查询使用. ​ 概述JSON 代表 JavaScript Object Notation。JSON是开放的标准格式，由key-value对组成。J...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"postgreSQL","slug":"postgreSQL","count":2,"path":"api/tags/postgreSQL.json"}],"author":{"name":"Sh1mwww","slug":"blog-author","avatar":"https://img.onl/qZjVAP","link":"/","description":"及时行乐","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"分布式和微服务的区别","uid":"a151887ec11ae6391c8864d43efe6e8e","slug":"attribute","date":"2023-03-28T06:20:55.000Z","updated":"2023-03-28T06:39:54.357Z","comments":true,"path":"api/articles/attribute.json","keywords":null,"cover":"https://cdn.pixabay.com/photo/2015/12/01/20/28/road-1072821_960_720.jpg","text":"1.分布式和微服务有什么区别呢？分布式的核心就一个字：拆。只要是将一个项目拆分成了多个模块，并将这些模块分开部署，那就算是分布式。 如何拆呢？有两种方式：水平拆分，或垂直拆分（也称为“横向拆分”和“垂直拆分”），具体如下： 水平拆分：根据“分层”的思想进行拆分。例如，可以将一个项...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"service","slug":"service","count":1,"path":"api/tags/service.json"}],"author":{"name":"Sh1mwww","slug":"blog-author","avatar":"https://img.onl/qZjVAP","link":"/","description":"及时行乐","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}