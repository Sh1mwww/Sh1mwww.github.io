{"title":"Nginx攻击方式和解决方案","uid":"e59b750bc82711213370e958d83d7a80","slug":"nginx-attact","date":"2023-03-28T05:46:26.000Z","updated":"2023-03-28T06:00:04.639Z","comments":true,"path":"api/articles/nginx-attact.json","keywords":null,"cover":"https://cdn.pixabay.com/photo/2015/12/01/20/28/forest-1072828_960_720.jpg","content":"<h2 id=\"3分钟了解-Nginx\"><a href=\"#3分钟了解-Nginx\" class=\"headerlink\" title=\"3分钟了解 Nginx\"></a>3分钟了解 Nginx</h2><p><strong>Nginx</strong>是一款高性能的<strong>Web服务器</strong>和反向代理服务器。</p>\n<p>它可以用来搭建网站、做应用服务器，能够处理大量的并发连接和请求。</p>\n<ul>\n<li>静态内容托管（主要）：可以用来做网页、图片、文件的 “静态”内容托管。</li>\n<li>动态内容托管（主要）：将经常访问的动态内容缓存到内存中，提高访问速度和性能。</li>\n<li>反向代理（主要）：将客户端的请求发送到后端真实服务器，并将后端服务器的响应返回给客户端。</li>\n</ul>\n<p>*类似于一个快递收发室，指挥快递（流量）应该投递到哪个买家。</p>\n<p>它还能提供一些高级功能：</p>\n<ul>\n<li>负载均衡：将客户端的请求分发到多个后端服务器上，从而提高服务的可用性和性能。</li>\n<li>SSL&#x2F;TLS加密传输：通过加密和认证保护数据传输安全。</li>\n<li>HTTP&#x2F;2支持：通过多路复用技术提高并发连接处理能力和页面加载速度。</li>\n<li>安全防护：提供多种防护机制，如限制IP访问、请求频率限制、反爬虫等。</li>\n<li>动态内容处理：支持FastCGI、uWSGI等协议，与后端应用服务器进行动态内容交互。</li>\n<li>日志记录：记录访问日志和错误日志，方便监控和排查问题。</li>\n<li>自定义模块开发：支持自定义模块开发，可以根据需求进行二次开发和扩展。<br>读到这里，我知道很多人脑子都要爆了。现在让我们直入主题。结合以上功能的能做哪些攻击方式。</li>\n</ul>\n<h2 id=\"反向代理攻击\"><a href=\"#反向代理攻击\" class=\"headerlink\" title=\"反向代理攻击\"></a>反向代理攻击</h2><p>使用<strong>Nginx</strong>作为反向代理服务器，将攻击流量转发到目标服务器。这样就能隐藏攻击流量的真实地址。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">server &#123;\n    listen 80;\n    server_name www.example.com;\n    location &#x2F; &#123;\n        proxy_pass http:&#x2F;&#x2F;backend_server;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    &#125;\n&#125;</code></pre>\n<ul>\n<li>所有访问<a href=\"http://www.example.com:80的流量全部都会转发到http://backend_server服务器上。\">www.example.com:80的流量全部都会转发到http://backend_server服务器上。</a></li>\n<li>proxy_set_header X-Real-IP $remote_addr; 设置请求头提供真实来源ip。</li>\n<li>proxy_set_header Host $host;设置访问的Host。</li>\n</ul>\n<p>只要把<strong>X-Real-IP</strong>改成其他不存在的<strong>IP</strong>，就可以隐藏自己的真实IP地址，让攻击更难以被追踪和防御。当然相对于客户端来说，只能知道<strong>nginx</strong>的地址就不知道真实服务器的地址了。</p>\n<h2 id=\"DDoS攻击\"><a href=\"#DDoS攻击\" class=\"headerlink\" title=\"DDoS攻击\"></a>DDoS攻击</h2><p><strong>DDoS</strong>攻击就是借助某些工具瞬间发动大量的请求，让服务器资源耗尽，无法正常响应其他用户的请求，一般也常用于压力测试。介绍一些常用的工具：</p>\n<ul>\n<li>**ApacheBench (ab)**：常用的命令行工具，用于模拟多个并发请求。可以控制请求总数、并发数等参数。</li>\n<li><strong>Siege</strong>：命令行工具，和上面一样，并且还支持 <strong>HTTP</strong>和<strong>HTTPS</strong>协议。</li>\n<li><strong>JMeter</strong>：一个功能强大的<strong>Java</strong>应用程序，可以用于模拟各种负载情况.<strong>JMeter</strong>可以通过图形界面进行配置，支持更多协议和数据格式，包括 HTTP、HTTPS、SOAP、REST 等。<br>但事实往往比这个残酷，攻击者会做一些病毒，在网络上传播开来，病毒运行时可以直接疯狂访问服务器，或者利用<strong>Nginx</strong>提供的反向代理和其支持的比如<strong>socket、SSL</strong>，不断的建立握手请求。</li>\n</ul>\n<h2 id=\"限流、黑名单防御\"><a href=\"#限流、黑名单防御\" class=\"headerlink\" title=\"限流、黑名单防御\"></a>限流、黑名单防御</h2><p>主要给大家介绍怎么防御。这种病毒感染方式就不说了，我害怕戴银手铐。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http &#123;\n    limit_req_zone $binary_remote_addr zone&#x3D;one:10m rate&#x3D;5r&#x2F;s;\n\n    geo $block &#123;\n        default 0;\n        include &#x2F;path&#x2F;to&#x2F;block_ip.txt;\n    &#125;\n\n    server &#123;\n        listen 80;\n\n        location &#x2F; &#123;\n            limit_req zone&#x3D;one burst&#x3D;10 nodelay;\n            if ($block) &#123;\n                return 403;\n            &#125;\n            proxy_pass http:&#x2F;&#x2F;backend;\n        &#125;\n    &#125;\n&#125;</code></pre>\n<ul>\n<li><strong>limit_req_zone</strong>定义了一个名为“one”的限制请求速率的区域，该区域的大小为10MB，请求速率限制为每秒5个请求。</li>\n<li><strong>limit_req</strong>指定使用名为“one”的限制规则。</li>\n<li><strong>geo $block</strong>是黑名单，这个文件可以写需要屏蔽的ip。</li>\n<li><strong>server</strong>块中的location指令使用了<strong>limit_req</strong>和if表示黑名单的返回403状态码。</li>\n</ul>\n<h2 id=\"负载均衡防御\"><a href=\"#负载均衡防御\" class=\"headerlink\" title=\"负载均衡防御\"></a>负载均衡防御</h2><p>假设我有两个后端服务器。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http &#123;\n  upstream backend &#123;\n    # 轮询方式的负载均衡\n    server backend1.example.com;\n    server backend2.example.com;\n  &#125;\n...\n  server&#123;...&#125;\n&#125;</code></pre>\n<p>有多种负载均衡方式。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">server &#123;\n  ...\n   location &#x2F;api&#x2F; &#123;\n     # 轮训\n     proxy_pass http:&#x2F;&#x2F;backend;\n   &#125;\n\n   location &#x2F;lb&#x2F; &#123;\n     # IP哈希方式的负载均衡\n     ip_hash;\n     proxy_pass http:&#x2F;&#x2F;backend;\n   &#125;\n\n   location &#x2F;upstream&#x2F; &#123;\n     # 根据服务器性能或响应时间进行加权轮询\n     upstream backend &#123;\n       server backend1.example.com weight&#x3D;2;\n       server backend2.example.com;\n     &#125;\n     # 对 backend 进行访问\n     proxy_pass http:&#x2F;&#x2F;backend;\n   &#125;\n\n   location &#x2F;least_conn&#x2F; &#123;\n     # 最少连接数的负载均衡\n     least_conn;\n     proxy_pass http:&#x2F;&#x2F;backend;\n   &#125;\n\n   location &#x2F;random&#x2F; &#123;\n     # 随机方式的负载均衡\n     random;\n     proxy_pass http:&#x2F;&#x2F;backend;\n   &#125;\n\n   location &#x2F;sticky&#x2F; &#123;\n     # 基于客户端IP的哈希方式的负载均衡\n     hash $remote_addr consistent;\n     server backend1.example.com;\n     server backend2.example.com;\n   &#125;\n &#125;</code></pre>\n<p>很多人学nginx都会对ip_hash和基于客户端IP的哈希方式的负载均衡有疑惑。分不清，我一句话给大家讲清楚。</p>\n<ul>\n<li><strong>ip_hash</strong>能保证相同来源一定能访问相同的服务器，适用于登录等有状态的场景。在请求量少的时候，容易出现很多ip落在同一服务器上，分布不均衡。</li>\n<li>基于客户端ip的hash，是根据客户端 IP 地址计算哈希值，然后将哈希值与后端服务器数量取模。使请求平均分配到不同的服务器上，也能保证同一ip请求落到同一服务器上。但是可以保证各个服务器比较均衡。<br>我认为使用方式二更好，可能理解有限，欢迎各位读者分享自己的看法！</li>\n</ul>\n<h2 id=\"网络钓鱼攻击\"><a href=\"#网络钓鱼攻击\" class=\"headerlink\" title=\"网络钓鱼攻击\"></a>网络钓鱼攻击</h2><p>黑客可以使用Nginx伪装成一个合法的网站，诱骗用户输入敏感信息。例如，他们可以使用Nginx构造一个伪造的登录页面，让用户输入用户名和密码，然后将这些信息发送给黑客服务器。</p>\n<p>其实就是静态托管+反向代理功能的组合。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">server &#123;\n    listen       80;\n    server_name  example.com;\n\n    # 静态网站托管\n    location &#x2F; &#123;\n        root   &#x2F;var&#x2F;www&#x2F;mywebsite&#x2F;dist;\n        index  index.html index.htm;\n    &#125;\n\n    # API代理转发\n    location &#x2F;api &#123;\n        proxy_pass  http:&#x2F;&#x2F;localhost:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    &#125;\n&#125;</code></pre>\n<p>访问根目录就访问到静态的网站资源。<br>访问&#x2F;api路由转发到api服务上。</p>\n","text":"3分钟了解 NginxNginx是一款高性能的Web服务器和反向代理服务器。 它可以用来搭建网站、做应用服务器，能够处理大量的并发连接和请求。 静态内容托管（主要）：可以用来做网页、图片、文件的 “静态”内容托管。 动态内容托管（主要）：将经常访问的动态内容缓存到内存中，提高访问...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"nginx","slug":"nginx","count":1,"path":"api/tags/nginx.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E5%88%86%E9%92%9F%E4%BA%86%E8%A7%A3-Nginx\"><span class=\"toc-text\">3分钟了解 Nginx</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%94%BB%E5%87%BB\"><span class=\"toc-text\">反向代理攻击</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#DDoS%E6%94%BB%E5%87%BB\"><span class=\"toc-text\">DDoS攻击</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%99%90%E6%B5%81%E3%80%81%E9%BB%91%E5%90%8D%E5%8D%95%E9%98%B2%E5%BE%A1\"><span class=\"toc-text\">限流、黑名单防御</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%98%B2%E5%BE%A1\"><span class=\"toc-text\">负载均衡防御</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%BB%9C%E9%92%93%E9%B1%BC%E6%94%BB%E5%87%BB\"><span class=\"toc-text\">网络钓鱼攻击</span></a></li></ol>","author":{"name":"Sh1mwww","slug":"blog-author","avatar":"https://img.onl/qZjVAP","link":"/","description":"及时行乐","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"分布式和微服务的区别","uid":"a151887ec11ae6391c8864d43efe6e8e","slug":"attribute","date":"2023-03-28T06:20:55.000Z","updated":"2023-03-28T06:39:54.357Z","comments":true,"path":"api/articles/attribute.json","keywords":null,"cover":"https://cdn.pixabay.com/photo/2015/12/01/20/28/road-1072821_960_720.jpg","text":"1.分布式和微服务有什么区别呢？分布式的核心就一个字：拆。只要是将一个项目拆分成了多个模块，并将这些模块分开部署，那就算是分布式。 如何拆呢？有两种方式：水平拆分，或垂直拆分（也称为“横向拆分”和“垂直拆分”），具体如下： 水平拆分：根据“分层”的思想进行拆分。例如，可以将一个项...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"service","slug":"service","count":1,"path":"api/tags/service.json"}],"author":{"name":"Sh1mwww","slug":"blog-author","avatar":"https://img.onl/qZjVAP","link":"/","description":"及时行乐","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"如何使用Docker部署一个go程序","uid":"6d1c99c12c344c631fb3ed115b7df580","slug":"docker-go","date":"2023-03-12T07:30:59.000Z","updated":"2023-03-12T08:40:47.787Z","comments":true,"path":"api/articles/docker-go.json","keywords":null,"cover":"https://cdn.pixabay.com/photo/2013/04/04/12/34/mountains-100367_960_720.jpg","text":"Docker定义Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows操作系统的机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。 本文我们介绍怎么使用 Docke...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"docker","slug":"docker","count":2,"path":"api/tags/docker.json"},{"name":"golang","slug":"golang","count":2,"path":"api/tags/golang.json"}],"author":{"name":"Sh1mwww","slug":"blog-author","avatar":"https://img.onl/qZjVAP","link":"/","description":"及时行乐","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}