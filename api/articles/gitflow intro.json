{"title":"Git Flow 工作原理","uid":"4783a03c76b99864e7fb550cfa766073","slug":"gitflow intro","date":"2023-03-11T08:13:35.000Z","updated":"2023-03-11T10:03:57.536Z","comments":true,"path":"api/articles/gitflow intro.json","keywords":null,"cover":[],"content":"<h2 id=\"一、-Git-Flow-工作模型的原理\"><a href=\"#一、-Git-Flow-工作模型的原理\" class=\"headerlink\" title=\"一、 Git Flow 工作模型的原理\"></a>一、 Git Flow 工作模型的原理</h2><p>无规矩不成方圆，但是规矩太多了，则感觉到束缚。我们一个人工作的时候喜欢无拘无束，想怎么干就怎么干，没有人评判，没有人检验。时间久了就会盲目自大，以为增删改查熟悉业务就能够搞定一些。但是当项目逐渐扩大，原来的灵活逐渐变成了混乱，原来的快速迭代因为过于随意的代码，而开发进度迟迟不前。掌握一种规范，便在处理类似问题的时候有章可循，也能够快速的融入一个团队。另外所谓规范，可以说是比较好的实践，按照规范来，项目也能稳健的发展。</p>\n<p>Git Flow 就是如何使用git 分支的一种规范，或者叫做推荐。</p>\n<p>根据Git Flow 的推荐，我们要将Git 的分支分为 master 、develop 、hotfix 、release、feature这五个分支。各种分支分别负责不同的功能，平时开发的时候各司其职，因此会有比较小的冲突率。那么可以用这些减少冲突的时间，少加会班，多有点自己的生活岂不快哉。一图胜千言：</p>\n<img src=\"https://img.onl/3699YM\">\n\n<h3 id=\"master-分支\"><a href=\"#master-分支\" class=\"headerlink\" title=\"master 分支\"></a>master 分支</h3><p>master 分支主要方稳定、随时可上线的版本。这个分支只能从别的分支上合并过来，一般来讲，从develop 上合并，或者从bugfix 分支上合并过来。不能直接在master 分支上进行commit文件。因为是稳定的版本，所以每次版本发布都要在这个分支上添加标签(tag)。</p>\n<h3 id=\"develop-分支\"><a href=\"#develop-分支\" class=\"headerlink\" title=\"develop 分支\"></a>develop 分支</h3><p>develop 分支是所有开发分支的母体，所有的开发分支都要从develop上切出来，开发完成之后最后都要合并到develop上。</p>\n<h3 id=\"hotfix-分支\"><a href=\"#hotfix-分支\" class=\"headerlink\" title=\"hotfix 分支\"></a>hotfix 分支</h3><p>hotfix 分支用来修复生产中的紧急bug，由于develop分支尚处于开发过程中，代码不稳定，不能直接应用于生产。所以从master分支上切出一个分支，修复完成之后合并到master分支，并且合并到develop上。</p>\n<h3 id=\"release-分支\"><a href=\"#release-分支\" class=\"headerlink\" title=\"release 分支\"></a>release 分支</h3><p>release 分支可以称之为预发布的版本。当我们认为develop版本的代码已经趋于成熟，我们可以打一个release分支。在release 分支上测试完成之后，要将代码合并到master分支和develop上。master 分支是线上版本，而合并到develop版本是因为，在测试过程中，一些细节的东西可能会修改，因此这些优化的内容也应该合并到最终版本以及开发版本中。</p>\n<h3 id=\"feature-分支\"><a href=\"#feature-分支\" class=\"headerlink\" title=\"feature 分支\"></a>feature 分支</h3><p>feature 分支是最经常使用的分支了。当我们收到一个新的开发功能时，应该在develop分支上切出一个feature分支。用来完成新功能的开发，开发完成之后，要合并进develop分支上。</p>\n<h2 id=\"二、-Git-Flow-工具的使用\"><a href=\"#二、-Git-Flow-工具的使用\" class=\"headerlink\" title=\"二、 Git Flow 工具的使用\"></a>二、 Git Flow 工具的使用</h2><p>基本上各种git的客户端软件都会支持Git Flow 工作模型。sourcetree 上使用git flow 工作模型就很流畅，体验很好。但是为了全平台上通用，以及理解原理，快速上手。我们来学习下Git Flow 的命令行操作。</p>\n<p>git flow 是一种git的使用规范，当然也有相应的工具集，命令行命令让我们使用。</p>\n<img src=\"https://img.onl/Zxs70D\">\n\n<h3 id=\"1、起步\"><a href=\"#1、起步\" class=\"headerlink\" title=\"1、起步\"></a>1、起步</h3><p>安装git flow</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">brew install git-flow-avh</code></pre>\n<p>初始化git flow 工具库</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git flow init\n之后都按照默认的去配置，直接按enter键继续。</code></pre>\n<h3 id=\"2、feature-分支操作\"><a href=\"#2、feature-分支操作\" class=\"headerlink\" title=\"2、feature 分支操作\"></a>2、feature 分支操作</h3><p>增加feature新特性分支</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git flow feature start your roverliang&#x2F;addlist</code></pre>\n<p>示例:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">roverliang$ git flow feature start roverliang&#x2F;addlist\nSwitched to a new branch &#39;feature&#x2F;roverliang&#x2F;addlist&#39;\n\nSummary of actions:\n- A new branch &#39;feature&#x2F;roverliang&#x2F;addlist&#39; was created, based on &#39;develop&#39;\n- You are now on branch &#39;feature&#x2F;roverliang&#x2F;addlist&#39;\n\nNow, start committing on your feature. When done, use:\n\n     git flow feature finish roverliang&#x2F;addlist\n\nroverliang$ git branch\n  develop\n* feature&#x2F;roverliang&#x2F;addlist\n  master</code></pre>\n<p>完成新特性<br>这个动作执行的是下面的流程:<br>1.合并 addlist 分支到 develop<br>2.删除这个新特性分支<br>3.切换回 develop 分支</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git flow feature finish roverliang&#x2F;addlist</code></pre>\n\n<p>示例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">roverliang$ git flow feature finish roverliang&#x2F;addlist\nSwitched to branch &#39;develop&#39;\nYour branch is up to date with &#39;origin&#x2F;develop&#39;.\nAlready up to date.\nDeleted branch feature&#x2F;roverliang&#x2F;addlist (was 2e1b475).\n\nSummary of actions:\n- The feature branch &#39;feature&#x2F;roverliang&#x2F;addlist&#39; was merged into &#39;develop&#39;\n- Feature branch &#39;feature&#x2F;roverliang&#x2F;addlist&#39; has been locally deleted\n- You are now on branch &#39;develop&#39;\n\nroverliang$ git branch\n* develop\n  master\nroverliang$</code></pre>\n<p>获取一个发布的新特性的分支</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git flow feature track origin MYFEATURE</code></pre>\n\n<h3 id=\"3、release-分支操作\"><a href=\"#3、release-分支操作\" class=\"headerlink\" title=\"3、release 分支操作\"></a>3、release 分支操作</h3><p>准备release 版本</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git flow release start RELEASE [BASE]\n\n你可以选择提供一个 [BASE]参数，即提交记录的 sha-1 hash 值，来开启动 release 分支. 这个提交记录的 sha-1 hash 值必须是&#39;develop&#39; 分支下的。</code></pre>\n\n<p>示例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">roverliang$ git branch\n  develop\n  feature&#x2F;test\n* master\nroverliang$ git log --pretty&#x3D;oneline -3\n2e1b475f9825275aefa0892cfe5259aaac9a3483 (HEAD -&gt; master, origin&#x2F;test2, origin&#x2F;master, origin&#x2F;feature&#x2F;test, origin&#x2F;develop, feature&#x2F;test, develop) delte some content\n2d22f306d2dca363b8aaa05743be342a505aabb0        renamed:    demo.txt -&gt; test.txt\nfbf025e210952c3cdb10e219c4ee5f82b9f36327        modified:   demo.txt\nroverliang$</code></pre>\n\n<p>发布release 版本</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git flow release track RELEASE</code></pre>\n\n<p>完成release 版本 相当于执行以下几个动作：<br>1.归并 release 分支到 ‘master’ 分支<br>2.用 release 分支名打 Tag<br>3.归并 release 分支到 ‘develop’<br>4.移除 release 分支</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git flow release finish RELEASE</code></pre>\n\n<h3 id=\"4、bugfix-分支操作\"><a href=\"#4、bugfix-分支操作\" class=\"headerlink\" title=\"4、bugfix 分支操作\"></a>4、bugfix 分支操作</h3><p>紧急修复的需求：<br>1.紧急修复来自这样的需求：生产环境的版本处于一个不预期状态，需要立即修正。<br>2.有可能是需要修正 master 分支上某个 TAG 标记的生产版本。</p>\n<p>开始紧急修复，开启hotfix 分支</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git flow hotfix start VERSION [BASENAME]\nVERSION 参数标记着修正版本。你可以从 [BASENAME]开始，[BASENAME]为finish release时填写的版本号</code></pre>\n\n<p>完成紧急修复:当完成紧急修复分支，代码归并回 develop 和 master 分支。相应地，master 分支打上修正版本的 TAG。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">git flow hotfix finish VERSION</code></pre>","feature":true,"text":"一、 Git Flow 工作模型的原理无规矩不成方圆，但是规矩太多了，则感觉到束缚。我们一个人工作的时候喜欢无拘无束，想怎么干就怎么干，没有人评判，没有人检验。时间久了就会盲目自大，以为增删改查熟悉业务就能够搞定一些。但是当项目逐渐扩大，原来的灵活逐渐变成了混乱，原来的快速迭代因...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81-Git-Flow-%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">一、 Git Flow 工作模型的原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#master-%E5%88%86%E6%94%AF\"><span class=\"toc-text\">master 分支</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#develop-%E5%88%86%E6%94%AF\"><span class=\"toc-text\">develop 分支</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#hotfix-%E5%88%86%E6%94%AF\"><span class=\"toc-text\">hotfix 分支</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#release-%E5%88%86%E6%94%AF\"><span class=\"toc-text\">release 分支</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#feature-%E5%88%86%E6%94%AF\"><span class=\"toc-text\">feature 分支</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81-Git-Flow-%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">二、 Git Flow 工具的使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E8%B5%B7%E6%AD%A5\"><span class=\"toc-text\">1、起步</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81feature-%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">2、feature 分支操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81release-%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">3、release 分支操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81bugfix-%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">4、bugfix 分支操作</span></a></li></ol></li></ol>","author":{"name":"Sh1mwww","slug":"blog-author","avatar":"https://img.onl/qZjVAP","link":"/","description":"及时行乐","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"SpringBootES","uid":"0574b318c83e3f6598c19022ed2a3348","slug":"SpringBootES","date":"2023-03-11T09:47:46.000Z","updated":"2023-03-11T09:47:46.165Z","comments":true,"path":"api/articles/SpringBootES.json","keywords":null,"cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Sh1mwww","slug":"blog-author","avatar":"https://img.onl/qZjVAP","link":"/","description":"及时行乐","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"ElasticSearch数据库简单介绍","uid":"90bb244b78e2bf4cc75c96413958b4eb","slug":"elk","date":"2023-03-05T07:57:17.000Z","updated":"2023-03-11T09:54:50.919Z","comments":true,"path":"api/articles/elk.json","keywords":null,"cover":[],"text":"elasticsearch简介ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java开发的，并作为Apache许可条款下的开放源码发布，是当前流行的企业级搜索...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Sh1mwww","slug":"blog-author","avatar":"https://img.onl/qZjVAP","link":"/","description":"及时行乐","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}