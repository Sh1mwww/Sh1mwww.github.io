{"title":"理解 ES 查询机制","uid":"5af57275e38843538bce4be83af3cccf","slug":"es-search","date":"2023-03-12T07:19:46.000Z","updated":"2023-03-12T08:41:33.842Z","comments":true,"path":"api/articles/es-search.json","keywords":null,"cover":"https://cdn.pixabay.com/photo/2015/12/01/20/28/road-1072821_960_720.jpg","content":"<h2 id=\"为什么需要使用-ES-进行搜索\"><a href=\"#为什么需要使用-ES-进行搜索\" class=\"headerlink\" title=\"为什么需要使用 ES 进行搜索\"></a>为什么需要使用 ES 进行搜索</h2><p>ES除了拥有索引上的优势，最重要的还是数据的结构，这都是ES为什么效率高，会使用它的原因。</p>\n<h3 id=\"1，结构化数据-VS-非结构化数据\"><a href=\"#1，结构化数据-VS-非结构化数据\" class=\"headerlink\" title=\"1，结构化数据 VS 非结构化数据\"></a>1，结构化数据 VS 非结构化数据</h3><ul>\n<li>结构化数据：<br>  也称作行数据，关系型数据库进行存储和管理,是由二维表结构来逻辑表达和实现(可以使用行、列来表现)的数据，严格地遵循数据格式与长度规范。</li>\n<li>非结构化数据：<br>  又可称为全文数据，不定长或无固定格式，不适于由数据库二维表来表现，包括所有格式的办公文档、XML、HTML、word文档，邮件，各类报表、图片和音频、视频信息等。</li>\n</ul>\n<p>其他的不同之处还有：</p>\n<ul>\n<li>结构化数据往往占用的空间较小，占企业数据的 20% 左右，容易管理。</li>\n<li>非结构化数据通常占用更多的存储空间，约占企业数据的 80% 左右，比较难以管理<img src=\"https://img.onl/tJRjHp\" ></li>\n</ul>\n<h3 id=\"2，结构化搜索-vs-全文搜索\"><a href=\"#2，结构化搜索-vs-全文搜索\" class=\"headerlink\" title=\"2，结构化搜索 vs 全文搜索\"></a>2，结构化搜索 vs 全文搜索</h3><ul>\n<li>结构化搜索：<br>  通常查询具有固有结构的数据，答案要么是肯定的，要么是否定的（即便是类似正则匹配这样的结构化搜索，正则表达式匹配数据也是确定的），数据要么属于查询结果集合，要么不属于。</li>\n<li>全文搜索：<br>  通常查询全文字段&#x2F;文档的所有内容，答案返回的是一系列可能的数据，数据有一定概率属于结果集合。</li>\n</ul>\n<p>到这里，为什么需要使用 ES 进行搜索的答案就很明确了：对于非结构化文本（比如评论内容），传统的结构化搜索难以满足需求，于是就会使用 ES 进行全文搜索。当然 ES 不仅可以进行全文搜索，也可以进行一部分的结构化搜索，更加扩大了他的应用范围。对于数据量巨大的情景，有公司会使用 ES 代替传统的 MySQL 管理数据。</p>\n<h2 id=\"ES-基本概念介绍\"><a href=\"#ES-基本概念介绍\" class=\"headerlink\" title=\"ES 基本概念介绍\"></a>ES 基本概念介绍</h2><p>本小结主要是介绍 ES 的一些基本概念，目的是方便之前没有了解过 ES 的同学可以理解这次分享所介绍的内容。</p>\n<h3 id=\"1，ES-存储模型\"><a href=\"#1，ES-存储模型\" class=\"headerlink\" title=\"1，ES 存储模型\"></a>1，ES 存储模型</h3><p>ES 在设计存储模型时，考虑了大家从关系型数据库转换肯能带来的困难，于是设计了 Index、Type、Document、Field 分别于对应传统关系型数据库(比如 MySQL) 的 Database、Table、Row、Column。<br><strong>注意：</strong> ES 存储时，并没有 Type 的概念，同一个Index 里的 Type 会拍平存储，只是方便理解才会对使用者提供这样一个抽象。由于Type 的存在会带来一些问题，在后续的版本里会逐步移除。<br><img src=\"https://img.onl/O2IZjP\" ></p>\n<h3 id=\"2，ES-与-Lucene\"><a href=\"#2，ES-与-Lucene\" class=\"headerlink\" title=\"2，ES 与 Lucene\"></a>2，ES 与 Lucene</h3><p>ES 底层基于 Lucene 开发，Lucene作为其核心来实现索引和搜索的功能。我们虽然讲的是 ES，但很大一部分内容是 Lucene 的实现。​</p>\n","text":"为什么需要使用 ES 进行搜索ES除了拥有索引上的优势，最重要的还是数据的结构，这都是ES为什么效率高，会使用它的原因。 1，结构化数据 VS 非结构化数据 结构化数据： 也称作行数据，关系型数据库进行存储和管理,是由二维表结构来逻辑表达和实现(可以使用行、列来表现)的数据，严格...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"elasticsearch","slug":"elasticsearch","count":3,"path":"api/tags/elasticsearch.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8-ES-%E8%BF%9B%E8%A1%8C%E6%90%9C%E7%B4%A2\"><span class=\"toc-text\">为什么需要使用 ES 进行搜索</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%EF%BC%8C%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E6%8D%AE-VS-%E9%9D%9E%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">1，结构化数据 VS 非结构化数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%EF%BC%8C%E7%BB%93%E6%9E%84%E5%8C%96%E6%90%9C%E7%B4%A2-vs-%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2\"><span class=\"toc-text\">2，结构化搜索 vs 全文搜索</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ES-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\">ES 基本概念介绍</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%EF%BC%8CES-%E5%AD%98%E5%82%A8%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">1，ES 存储模型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%EF%BC%8CES-%E4%B8%8E-Lucene\"><span class=\"toc-text\">2，ES 与 Lucene</span></a></li></ol></li></ol>","author":{"name":"Sh1mwww","slug":"blog-author","avatar":"https://img.onl/qZjVAP","link":"/","description":"及时行乐","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"如何使用Docker部署一个go程序","uid":"6d1c99c12c344c631fb3ed115b7df580","slug":"docker-go","date":"2023-03-12T07:30:59.000Z","updated":"2023-03-12T08:40:47.787Z","comments":true,"path":"api/articles/docker-go.json","keywords":null,"cover":"https://cdn.pixabay.com/photo/2013/04/04/12/34/mountains-100367_960_720.jpg","text":"Docker定义Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows操作系统的机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。 本文我们介绍怎么使用 Docke...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"docker","slug":"docker","count":2,"path":"api/tags/docker.json"},{"name":"golang","slug":"golang","count":2,"path":"api/tags/golang.json"}],"author":{"name":"Sh1mwww","slug":"blog-author","avatar":"https://img.onl/qZjVAP","link":"/","description":"及时行乐","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Goroutine基础","uid":"bee84e518ec4344cb23b6f3015f64773","slug":"Goroutine","date":"2023-03-12T07:01:19.000Z","updated":"2023-03-12T08:41:53.876Z","comments":true,"path":"api/articles/Goroutine.json","keywords":null,"cover":"https://cdn.pixabay.com/photo/2017/05/09/03/46/alberta-2297204_960_720.jpg","text":"这篇文章将关注 Go 语言基础部分。我们将讨论关于性能方面的一些知识，并通过创建一些简单的 goroutine 来扩展我们的应用程序。 我们还会关注一些 Go 语言的底层执行逻辑以及 Go 语言与其他语言的不同之处。 Go 语言的并发继续讨论之前，我们必须理解并发与并行的概念。G...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"golang","slug":"golang","count":2,"path":"api/tags/golang.json"}],"author":{"name":"Sh1mwww","slug":"blog-author","avatar":"https://img.onl/qZjVAP","link":"/","description":"及时行乐","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}