{"title":"如何使用Docker部署一个go程序","uid":"6d1c99c12c344c631fb3ed115b7df580","slug":"docker-go","date":"2023-03-12T07:30:59.000Z","updated":"2023-03-12T07:33:52.160Z","comments":true,"path":"api/articles/docker-go.json","keywords":null,"cover":null,"content":"<h2 id=\"Docker定义\"><a href=\"#Docker定义\" class=\"headerlink\" title=\"Docker定义\"></a>Docker定义</h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows操作系统的机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p>\n<p>本文我们介绍怎么使用 Docker 部署 Go 项目。阅读本文，需要读者朋友们了解 Docker 的基本操作。</p>\n<h2 id=\"go项目的开发\"><a href=\"#go项目的开发\" class=\"headerlink\" title=\"go项目的开发\"></a>go项目的开发</h2><p>首先，我们开发一个简单的 Go Web 项目，使用 Go 内置命令行工具 <strong>go build</strong> 编译生成可执行文件 <strong>.&#x2F;hello</strong>。这是项目结构</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">.\n├── Dockerfile\n├── go.mod\n├── hello\n├── main.go\n└── service.log</code></pre>\n<p>我们使用 Go 标准库编写一个 Web 项目，运行编译生成的可执行程序，访问 <strong><a href=\"http://127.0.0.1:8080/hello\">http://127.0.0.1:8080/hello</a></strong>，输出 <strong>hello word</strong>。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">curl http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;hello\n# 输出\nhello world</code></pre>\n<h2 id=\"Docker的使用\"><a href=\"#Docker的使用\" class=\"headerlink\" title=\"Docker的使用\"></a>Docker的使用</h2><p>我们开始编写 <strong>Dockerfile</strong> 文件，使该项目可以支持使用 Docker 部署。</p>\n<p>Dockerfile 文件：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\"># 基础镜像\nFROM alpine:3.12\n# 维护者\nMAINTAINER frank\n# docker build 时执行命令 - 创建目录\nRUN mkdir -p &quot;&#x2F;data&#x2F;app&quot; \\\n&amp;&amp; ln -sf &#x2F;dev&#x2F;stdout &#x2F;data&#x2F;app&#x2F;service.log\n# 工作目录\nWORKDIR &quot;&#x2F;data&#x2F;app&quot;\n# 拷贝\nCOPY hello &#x2F;data&#x2F;app&#x2F;hello\n# docker run 时执行命令\nENTRYPOINT [&quot;.&#x2F;hello&quot;]</code></pre>\n<p>在编写完 Dockerfile 文件之后，我们可以使用 docker 命令构建镜像，前提是我们本机已安装 Docker。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker build -t hello:v1.0.0 .</code></pre>\n<p>运行以上构建 Docker 镜像的命令之后，我们就已成功构建 Docker 镜像。</p>\n","feature":true,"text":"Docker定义Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows操作系统的机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。 本文我们介绍怎么使用 Docke...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Docker%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">Docker定义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#go%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%BC%80%E5%8F%91\"><span class=\"toc-text\">go项目的开发</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Docker%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">Docker的使用</span></a></li></ol>","author":{"name":"Sh1mwww","slug":"blog-author","avatar":"https://img.onl/qZjVAP","link":"/","description":"及时行乐","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"理解 ES 查询机制","uid":"5af57275e38843538bce4be83af3cccf","slug":"es-search","date":"2023-03-12T07:19:46.000Z","updated":"2023-03-12T07:24:12.659Z","comments":true,"path":"api/articles/es-search.json","keywords":null,"cover":[],"text":"为什么需要使用 ES 进行搜索ES除了拥有索引上的优势，最重要的还是数据的结构，这都是ES为什么效率高，会使用它的原因。 1，结构化数据 VS 非结构化数据 结构化数据： 也称作行数据，关系型数据库进行存储和管理,是由二维表结构来逻辑表达和实现(可以使用行、列来表现)的数据，严格...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Sh1mwww","slug":"blog-author","avatar":"https://img.onl/qZjVAP","link":"/","description":"及时行乐","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}